# -*- coding: utf-8 -*-
"""
Django settings for morumotto project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
from .custom_settings import DATABASE_ENGINE,DATABASE_NAME, \
    DATABASE_USER_NAME, DATABASE_PASSWORD, DATABASE_HOST, CUSTOM_HOSTS
# from .crontab_settings import CRONJOBS
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

ADMIN_SITE_HEADER = "Morumotto Administration"
ADMIN_INDEX_TITLE = "Configurations"
ADMIN_SITE_TITLE = "Morumotto Admin"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5#)0f%ko-$qpg29u8^tzzo_54sua#5zm5))!n-mambk)w^!r7a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1"] + CUSTOM_HOSTS


# Application definition

INSTALLED_APPS = [
    'object_tools',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'archive.apps.archiveConfig', #Cette ligne permet de dire à Django de créer les tables correspondant aux classes qui se trouvent dans sicaqo_project/archive/models.py
    'qualitycontrol.apps.QualitycontrolConfig',
    'monitoring.apps.MonitoringConfig',
    'home.apps.HomeConfig',
    'logdb.apps.LogDBAppConfig',
    'celery_progress',
    'django_celery_results',
    # 'django_celery_beat',
    'bootstrap_datepicker_plus',
    'bootstrap4',
    'tempus_dominus',
    'bootstrap_modal_forms',
    'betterforms',
    'reset_migrations',
    'admin_reorder',
    # 'django_crontab',
    # 'django_db_logger',
    'leaflet',
    'admincolors',
    'export',
    # 'background_task',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]

ROOT_URLCONF = 'morumotto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'admincolors.context_processors.admin_theme',
                # 'morumotto.context_processors.my_login_form'
            ],
        },
    },
]

WSGI_APPLICATION = 'morumotto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': DATABASE_ENGINE,
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # 'OPTIONS' : {
        #              "charset": "utf8",
        #              "init_command": "SET foreign_key_checks = 0;"
        #              },
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER_NAME,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
        'PORT': '',
        'TEST': {
            'NAME': 'test_Morumotto',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

ADMIN_REORDER = (
    # Reorder app models
    'auth',

    {'app': 'archive', 'label': 'archive', 'models': (
        'archive.Configuration',
        'archive.NSLC',
        'archive.Network',
        'archive.Station',
        'archive.Location',
        'archive.Channel',
        'archive.Source',
        'archive.Gap',
        'archive.DataFile',
        'archive.Postfile',
        'archive.Request',
        'archive.SourceAvailability',
        'archive.SourceAvailabilityStat',
        'archive.SourceOnlineStat')},

    {'app': 'monitoring', 'models': (
        'monitoring.ArchiveMonitoring',
        'monitoring.Component',
        'monitoring.Stat',
        'monitoring.ChanPath',
        'monitoring.CompPath',
        'monitoring.AverageStat',
        'monitoring.AverageCompStat'
        )},
    'qualitycontrol','logdb','django_celery_results',
)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'db_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.DatabaseLogHandler'
        },
        'monitoring_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.MonitoringLogHandler'
        },
        'update_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.UpdateLogHandler'
        },
        'qc_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.QCLogHandler'
        },
        'stats_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.StatsLogHandler'
        },
        'stack_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.StackLogHandler'
        },
        'plugins_log': {
            'level': 'DEBUG',
            'class': 'logdb.db_log_handler.PluginsLogHandler'
        },
    },
    'loggers': {
        'Status': {
            'handlers': ['db_log'],
            'level': 'DEBUG'
        },
        'Monitoring': {
            'handlers': ['monitoring_log'],
            'level': 'DEBUG'
        },
        'Update': {
            'handlers': ['update_log'],
            'level': 'DEBUG'
        },
        'QC': {
            'handlers': ['qc_log'],
            'level': 'DEBUG'
        },
        'Stats': {
            'handlers': ['stats_log'],
            'level': 'DEBUG'
        },
        'Stack': {
            'handlers': ['stack_log'],
            'level': 'DEBUG'
        },
        'Plugins': {
            'handlers': ['plugins_log'],
            'level': 'DEBUG'
        },
    }
}

LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (47.921230, 106.918556),
    'DEFAULT_ZOOM': 11,
    'MAX_ZOOM': 19,
    # 'TILES': [('OpenStreetMap', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png', {'maxZoom': 19}),
    #       ('Satellite', 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
	#          'attribution': 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',
    #          'maxZoom': 19})]
    # 'MIN_ZOOM':1,
}

ADMIN_COLORS_BASE_THEME = 'Custom'
# ADMIN_COLORS = [
#     ('Default', []),
#     ('Lite', 'admincolors/css/lite.css'),
#     ('Dark Blue', 'admincolors/css/dark-blue.css'),
#     ('Gray', 'admincolors/css/gray.css')
# ]
ADMIN_COLORS = [
        ('Custom', 'home/css/custom.css'),
]
DJANGO_DB_LOGGER_ENABLE_FORMATTER = True
DJANGO_DB_LOGGER_ADMIN_LIST_PER_PAGE = 100
# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False #default is True

TEMPUS_DOMINUS_INCLUDE_ASSETS = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, ""),
)

# Logins
LOGIN_URL = "/home/login"
LOGIN_REDIRECT_URL = '/home'
LOGOUT_REDIRECT_URL = '/home'
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"

EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")
# This is for development and basic.
# If you want the software to actually send mails,
# comment the last line and use the next paragraph parameters instead
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'morumotto'
# EMAIL_HOST_PASSWORD = 'somepassword'
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = 'Morumotto <noreply@example.com>'

# Celery Setup
CELERY_BROKER_URL = 'amqp://localhost'
CELERY_RESULT_BACKEND = "amqp"
DATA_UPLOAD_MAX_NUMBER_FIELDS = 3000
CELERY_IGNORE_RESULT = True
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
# CELERY_BACKEND="rpc://"
# CELERY_BROKER_URL = 'amqp://morumotto:M0RUM0TT0@localhost/morumotto_vhost'
# CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
