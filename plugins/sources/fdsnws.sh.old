#!/bin/bash
# Siqaco plugin to get data from the FDSN Web Service, using dataselect

echo $@
#*******************************************************************************
#  See plugins/source_template.sh for infos about this file structure          #
#                                                                              #
#*******************************************************************************

echo "in shell"
# Help :
if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
  echo "Usage: `basename $0` NSLC starttime endtime workspace data_format\
  data_structure connect_infos verbose_level"
  exit 0
fi

# Check number of args
if [ "$#" -ne 8 ]
then
  .log 3 "Missing some parameters, see --help"
  exit 0
fi

# Verbose
__VERBOSE=$8

declare -A LOG_LEVELS
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" \
            [5]="notice" [6]="info" [7]="debug")
function .log () {
  local LEVEL=${1}
  shift
  if [ ${__VERBOSE} -ge ${LEVEL} ]; then
    echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
  fi
}

join() {
    local list=$1 sep=$2 ret=$3
    shift 3 || shift $(($#))
    printf -v "$list" "%s" "$ret${@/#/$sep}"
}

# get arguments
pid=$$
nslc_list=$1
# pour l'instant j'ai rien trouvé de mieux que de rentrer la liste
# des NSLC qui nous intéresse sous la forme d'une chaine de charactères séparés
# par une virgule... mais il y a peut-être une meilleur solution??
nslc_array=(${nslc_list//,/ })

starttime=$2 #ici au format YYYY-MM-DDTHH:MM:SS
endtime=$3 #ici au format YYYY-MM-DDTHH:MM:SS
workspace=$4
data_format=$5
data_structure=$6
connect_infos=$7

client="$(cut -d':' -f2 <<<"$connect_infos")"
.log 7 "client : $client"

filedate=$(date -d "$starttime" +'%Y-%m-%dT%H:%M:%S')
year=$(date -d $filedate '+%Y')
jday=$(date -d $filedate '+%j')
.log 7 "year : $year jday: $jday"
declare -a Net_array
declare -a Sta_array
declare -a Loc_array
declare -a Chan_array

for i in ${!nslc_array[@]}; do
  Net="$(cut -d'.' -f1 <<<"${nslc_array[i]}")"
  Sta="$(cut -d'.' -f2 <<<"${nslc_array[i]}")"
  Loc="$(cut -d'.' -f3 <<<"${nslc_array[i]}")"
  Chan="$(cut -d'.' -f4 <<<"${nslc_array[i]}")"

  Net_array[$i]=$Net
  Sta_array[$i]=$Sta
  Loc_array[$i]=$Loc
  Chan_array[$i]=$Chan

done;
unique_net=($(echo "${Net_array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
unique_sta=($(echo "${Sta_array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
unique_loc=($(echo "${Loc_array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
unique_chan=($(echo "${Chan_array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

join Netlist "," "${unique_net[@]}"
join Stalist "," "${unique_sta[@]}"
join Loclist "," "${unique_loc[@]}"
join Chanlist "," "${unique_chan[@]}"

echo "after join" $Netlist $Stalist $Loclist $Chanlist
# Loc=join_by ${Loc_array[@]}
# Chan=join_by ${Chan_array[@]}

# if [ $data_structure == "sds" ]
# then
#   filename="$workspace/$year/$Net/$Sta/$Chan.D/$nslc.D.$jday.mseed"
#   log 7 $filename
# else
#   .log 3 "Data structure $data_structure is not available for this source"
# fi

filename="$workspace/TEMP/testfile.seed"
.log 7 $filename
request="http://$client/fdsnws/dataselect/1/query?network=$Net&station=\
$Sta&location=$Loc&channel=$Chan&starttime=$starttime&endtime=$endtime"
.log 7 "request:" $request
wget -O $filename $request

# dataselect pour lire le fichier et aller écrire les données aux bons endroits
# de l'archive temporaire, en SDS
